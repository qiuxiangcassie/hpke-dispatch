initSidebarItems({"constant":[["AEAD_ALL","An iterable slice of [`Aead`] variants"],["KDF_ALL","An iterable slice of [`Kdf`] variants"],["KEM_ALL","An iterable slice of [`Kem`] variants"]],"enum":[["Aead","Aead represents an authenticated encryption with additional data encryption function, as per RFC9180ยง7.3"],["HpkeError","Describes things that can go wrong in the HPKE protocol"],["Kdf","Kdf represents an key derivation function, as per RFC9180ยง7.2"],["Kem","Kem represents an asymmetric key encapsulation mechanism, as per RFC9180ยง7.1. Currently only two of options listed in the hpke draft are available."]],"fn":[["base_mode_open","`base_mode_open` provides an interface to [`hpke::single_shot_open`] that does not require compile time selection of an algorithm. Instead, the selected algorithm is provided through the [`Config`] passed as the first argument."],["base_mode_seal","`base_mode_seal` provides an interface to [`hpke::single_shot_seal`] that does not require compile time selection of an algorithm. Instead, the selected algorithm is provided through the [`Config`] passed as the first argument."],["gen_keypair","generate a Keypair for the provided asymmetric key encapsulation mechanism ([`Kem`])"]],"struct":[["Config","Config is an open struct that contains an ([`Aead`], [`Kdf`], [`Kem`]) algorithmic triple. This can be used with [`Config::base_mode_seal`], [`Config::base_mode_open`], [`base_mode_seal`], or [`base_mode_open`]."],["EncappedKeyAndCiphertext","a simple struct to return the combined encapsulated key and ciphertext from seal"],["IdLookupError","A simple error type for failed id lookups"],["Keypair","An encoded keypair"]]});